cmake_minimum_required(VERSION 2.8)

if(POLICY CMP0020)
  cmake_policy(SET CMP0020 NEW)
endif()
if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()
if(POLICY CMP0048)
  cmake_policy(SET CMP0048 NEW)
endif()

if((NOT USE_SYSTEM_TIDY_HTML5) AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/tidy-html5/CMakeLists.txt)
  message(STATUS "Found tidy-html5 sources in 3rdparty folder, will use them to build the local lib instead of attempting to find the existing installation")
  add_subdirectory(tidy-html5)
  get_directory_property(TIDY_HTML5_LIB DIRECTORY tidy-html5 DEFINITION PROJECT_NAME)
  get_directory_property(TIDY_HTML5_SOURCES DIRECTORY tidy-html5 DEFINITION SOURCES)
  get_directory_property(TIDY_HTML5_INCLUDE_PATH DIRECTORY tidy-html5 DEFINITION INCLUDE_DIRS)
else()
  if(USE_SYSTEM_TIDY_HTML5)
    message(STATUS "USE_SYSTEM_TIDY_HTML5 option is set, will try to find the existing installation of tidy-html5")
  else()
    message(STATUS "Haven't found tidy-html5 sources in 3rdparty folder, will try to find the existing installation")
  endif()
  include(FindTidyHtml5)
endif()

if(NOT USE_QT5)
  if((NOT USE_SYSTEM_QT4_MIMETYPES) AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/qt4-mimetypes/CMakeLists.txt)
    message(STATUS "Found Qt4 Mimetypes sources in 3rdparty folder, will use them to build the local lib instead of attempting to find the existing installation")
    add_subdirectory(qt4-mimetypes)
    get_directory_property(QT4_MIMETYPES_LIB DIRECTORY qt4-mimetypes DEFINITION PROJECT_NAME)
    get_directory_property(QT4_MIMETYPES_SOURCES DIRECTORY qt4-mimetypes DEFINITION SOURCES)
    get_directory_property(QT4_MIMETYPES_INCLUDE_PATH DIRECTORY qt4-mimetypes DEFINITION INCLUDE_DIRS)
  else()
    if(USE_SYSTEM_QT4_MIMETYPES)
      message(STATUS "USE_SYSTEM_QT4_MIMETYPES option is set, will try to find the existing installation of Qt4 Mimetypes")
    else()
      message(STATUS "Haven't found Qt4 Mimetypes sources in 3rdparty folder, will try to find the existing installation")
    endif()
    include(FindQt4Mimetypes)
  endif()
endif()

if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
  add_subdirectory(stacktrace)
  get_directory_property(STACKTRACE_LIB DIRECTORY stacktrace DEFINITION PROJECT_NAME)
  get_directory_property(STACKTRACE_SOURCES DIRECTORY stacktrace DEFINITION SOURCES)
  get_directory_property(STACKTRACE_INCLUDE_PATH DIRECTORY stacktrace DEFINITION INCLUDE_DIRS)
endif()

set(THIRDPARTY_INCLUDE_DIRS ${TIDY_HTML5_INCLUDE_PATH})

set(THIRDPARTY_SOURCES ${TIDY_HTML5_SOURCES})

if(NOT USE_QT5)
  list(APPEND THIRDPARTY_INCLUDE_DIRS ${QT4_MIMETYPES_INCLUDE_PATH})
  list(APPEND THIDRPARTY_SOURCES ${QT4_MIMETYPES_SOURCES})
endif()

if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
  list(APPEND THIRDPARTY_INCLUDE_DIRS ${STACKTRACE_INCLUDE_PATH})
  list(APPEND THIRDPARTY_SOURCES ${STACKTRACE_SOURCES})
endif()

list(APPEND THIRDPARTY_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}")
