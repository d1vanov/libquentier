if("${LIBQUENTIER_FIND_PACKAGE_ARG}" STREQUAL "")
  set(LIBQUENTIER_FIND_PACKAGE_ARG "QUIET")
else()
  set(LIBQUENTIER_FIND_PACKAGE_ARG "")
endif()

LibquentierFindPackageWrapper(Qt5Core ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5Gui ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5Widgets ${Libquentier_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5PrintSupport ${Libquentier_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5Network ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5Xml ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5Sql ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5Test ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5LinguistTools ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5WebSockets ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5WebChannel ${LIBQUENTIER_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5WebEngineCore ${Libquentier_FIND_PACKAGE_ARG})
LibquentierFindPackageWrapper(Qt5WebEngineWidgets ${Libquentier_FIND_PACKAGE_ARG})

if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" AND NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
  LibquentierFindPackageWrapper(Qt5DBus ${Libquentier_FIND_PACKAGE_ARG})
endif()
